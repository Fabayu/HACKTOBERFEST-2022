--------------------------------------------------------------------------------------------------------
Problem 1 :
 Link to question : https://leetcode.com/problems/two-sum/
 Solution : 
 In Python 3:
 class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                sum=nums[i]+nums[j]
                if sum==target:
                    return i,j
        return []
--------------------------------------------------------------------------------------------------------
Problem 2 : 
 Link : https://leetcode.com/problems/reverse-linked-list/
 Solution 
 CPP
 ListNode* reverseList(ListNode* head) {
        if( head==NULL || head->next==NULL){
            return head;
        }
        
        ListNode* newnode=reverseList(head->next);
        head->next->next=head;
        head->next=NULL;
        return newnode;
        
        
 }
 
 ------------------------------------------------------------------------------------------------------------
 Problem 3:
 Link : https://leetcode.com/problems/first-bad-version/
 solution 
 CPP
 int firstBadVersion(int n) {
    int low=1,high=n;
    int mid=0;;
    while(low<=high){
    mid=low+(high-low)/2;
    if(low==high) return mid;

        if(isBadVersion(mid))
            high=mid;
        else
            low=mid+1;
    }
    return-1;
}

---------------------------------------------------------------------------------------------------------------
Problem 4:
link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
solution 
CPP

 int maxProfit(vector<int>& prices) {
        int lsf = INT_MAX; 
        int op = 0; 
        int pist = 0;
        
        for(int i = 0; i < prices.size(); i++){
            if(prices[i] < lsf){
                lsf = prices[i];
            }
            pist = prices[i] - lsf;
            if(op < pist){
                op = pist;
            }
        }
        return op;
        
    }
    
 ------------------------------------------------------------------------------------------------------------
 Problem 5:
 Link : https://leetcode.com/problems/maximum-subarray/
 solution 
 CPP    
  int maxSubArray(vector<int>& nums) {
        int maxSum=nums[0];
        int sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            sum+=nums[i];
            maxSum=max(maxSum,sum);
            if(sum<0)
                sum=0;
        }
        return maxSum;
    }
    
------------------------------------------------------------------------------------------------------------
 Problem 6:
 Link : https://leetcode.com/problems/rotate-array/
 solution 
 CPP      
     void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int> v(n);
        for(int i=0;i<n;i++){
            v[(i+k)%n]=nums[i];
        }
        for(int i=0;i<n;i++){
            nums[i]=v[i];
        }
      }























































